Problem 1 : 

Find maximum sum of triplets in an array such than i < j < k and a[i] < a[j] < a[k]

Given an array of positive integers of size n. Find the maximum sum of triplet( ai + aj + ak ) such that 0 <= i < j < k < n and ai < aj < ak. 

java code:


// Java program to find maximum triplet sum
import java.io.*;
import java.util.*;

class Main {

    // Function to calculate maximum triplet sum
    public static int maxTripletSum(int arr[], int n)
    {

        // Initialize suffix-array
        int maxSuffArr[] = new int[n + 1];

        // Set the last element
        maxSuffArr[n] = 0;

        // Calculate suffix-array containing maximum
        // value for index i, i+1, i+2, ... n-1 in
        // arr[i]
        for (int i = n - 1; i >= 0; --i)
            maxSuffArr[i] = Math.max(maxSuffArr[i + 1], arr[i]);

        int ans = 0;

        // Initialize set container
        TreeSet<Integer> lowValue = new TreeSet<Integer>();

        // Insert minimum value for first comparison
        // in the set
        lowValue.add(Integer.MIN_VALUE);

        for (int i = 0; i < n - 1; ++i) {
            if (maxSuffArr[i + 1] > arr[i]) {
                int left = lowValue.lower(arr[i]);
                if (left == Integer.MIN_VALUE) {
                    // Insert arr[i] in set<> for further
                    // processing
                    lowValue.add(arr[i]);
                    continue;
                }
                ans = Math.max(
                    ans, left + arr[i] + maxSuffArr[i + 1]);

                // Insert arr[i] in set<> for further
                // processing
                lowValue.add(arr[i]);
            }
        }
        return ans;
    }

    // Driver Code
    public static void main(String[] args)
    {
        int arr[] = { 2, 5, 3, 1, 4, 9 };
        int n = arr.length;

        System.out.println(maxTripletSum(arr, n));
    }
}
